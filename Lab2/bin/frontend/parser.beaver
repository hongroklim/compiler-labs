// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
        |
        ;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
             |
             ;

Declaration = FunctionDeclaration
            | FieldDeclaration
            | TypeDeclaration
            ;

FunctionDeclaration = Accessibility TypeName ID LPAREN Parameters RPAREN LCURLY Statements RCURLY;
FieldDeclaration = Accessibility TypeName ID SEMICOLON;
TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

Accessibility = PUBLIC
              |
              ;

TypeName = PrimitiveType
         | ArrayType
         | ID
         ;

PrimitiveType = VOID
              | BOOLEAN
              | INT
              ;

// Avoid LALR conflicts
// ArrayType = TypeName LBRACKET RBRACKET;
ArrayType = ArrayType LBRACKET RBRACKET
          | PrimitiveType LBRACKET RBRACKET
          | ID LBRACKET RBRACKET
          ;

/* T3 - 2b */
Parameters = NonEmptyPList
           |
           ;
NonEmptyPList = NonEmptyPList COMMA Parameter
              | Parameter
              ;
Parameter = TypeName ID;

Statements = Statement Statements
           |
           ;

Statement = LocalVarDeclaration 
          | BlockStatement
          | IfStatement
          | WhileStatement
          | BreakStatement
          | ReturnStatement
          | ExpressionStatement
          ;

LocalVarDeclaration = TypeName ID SEMICOLON;
BlockStatement = LCURLY Statements RCURLY;
// Shift-Reduce Conflict
IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement
            | IF LPAREN Expression RPAREN Statement
            ;
WhileStatement = WHILE LPAREN Expression RPAREN Statement;
BreakStatement = BREAK SEMICOLON;
ReturnStatement = RETURN SEMICOLON
                | RETURN Expression SEMICOLON
                ;
ExpressionStatement = Expression SEMICOLON;

Expression = Assignment
           | RHSExpression
           ;

Assignment = LHSExpression EQL Expression;
LHSExpression = ID
              | ArrayAccess
              ;
ArrayAccess = ID LBRACKET Expression RBRACKET
            | ArrayAccess LBRACKET Expression RBRACKET
            ;

RHSExpression = ArithmeticExpression
              | ArithmeticExpression ComparisonOperator ArithmeticExpression
              ;
ComparisonOperator = EQEQ
                   | NEQ
                   | LT
                   | LEQ
                   | GT
                   | GEQ
                   ;
ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
                     | Term
                     ;
AdditiveOperator = PLUS
                 | MINUS
                 ;
Term = Term MultiplicativeOperator Factor
     | Factor
     ;
MultiplicativeOperator = TIMES
                       | DIV
                       | MOD
                       ;
Factor = MINUS Factor
       | PrimaryExpression
       ;

PrimaryExpression = LHSExpression
                  | FunctionCall
                  | ArrayExpression
                  | STRING_LITERAL
                  | INT_LITERAL
                  | BooleanLiteral
                  | LPAREN Expression RPAREN
                  ;

FunctionCall = ID LPAREN Expressions RPAREN;
Expressions = NonEmptyEList
            |
            ;
NonEmptyEList = NonEmptyEList COMMA Expression
              | Expression
              ;

ArrayExpression = LBRACKET NonEmptyEList RBRACKET;
BooleanLiteral = TRUE
               | FALSE
               ;
/**/
